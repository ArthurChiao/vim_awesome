// Virtual class for body of any driver
virtual class verif {
  // This starts all the threads
  virtual task startSim();
  // This stops all the threads
  virtual task stopSim();
  // This prints all the stats
  virtual task printStats();
  // This check if driver is done or not
  virtual function bit isDone () {
    isDone = 0;
  }
  // set the driver config
  virtual task setConfig(integer item, integer value);
  virtual function integer getConfig(integer item) {
    getConfig = 32'hDEAD_BEAF;
  }
}
// ethernet inherits verif
class ethernet extends verif {
  integer min_frame_size;
  integer max_frame_size;
  task new() {
    min_frame_size = 32'h40;
    max_frame_size = 32'h200;
  }
  task startSim() {
    printf("Starting Simulation\n");
  }
  task stopSim() {
    printf("Stopping Simulation\n");
  }
  task printStats() {
    printf("Sent normal   frames %d\n",100);
    printf("Sent runt     frames %d\n",1);
    printf("Sent oversize frames %d\n",1);
  }
  function bit isDone() {
    isDone = 1;
  }
  task setConfig(integer item, integer value) {
    case(item) {
       0 : min_frame_size = value;
       1 : max_frame_size = value;
    }
  }
  function integer getConfig(integer item) {
    case(item) {
       0 : getConfig = min_frame_size;
       1 : getConfig = max_frame_size;
       default :  {
                   printf("Calling super.setConfig\n");
                    getConfig  = super.getConfig(item);
                  }
    }
  }
}

class ethernet2 extends ethernet {
  integer min_ipg;
  task new() {
    min_ipg = 32'hc;
  }
  task setConfig(integer item, integer value) {
    case(item) {
       2 : min_ipg = value;
       default : {
                   printf("Calling super.setConfig\n");
                   super.setConfig(item,value);
                  }
    }
  }
  function integer getConfig(integer item) {
    case(item) {
       2 : getConfig = min_ipg;
       default :  {
                   printf("Calling super.setConfig\n");
                    getConfig  = super.getConfig(item);
                  }
    }
  }
}

program class_extension {
  ethernet2 eth = new();
  eth.setConfig(0,32'h100);
  eth.setConfig(2,32'h24);
  printf ("Value of min_frame is %0x\n", eth.getConfig(0));
  printf ("Value of max_frame is %0x\n", eth.getConfig(1));
  printf ("Value of min_ipg   is %0x\n", eth.getConfig(2));
  printf ("Value of unknown   is %0x\n", eth.getConfig(3));

  eth.startSim();
  while (eth.isDone() == 0) {
   delay(1);
  }
  eth.stopSim();
  eth.printStats();
}
